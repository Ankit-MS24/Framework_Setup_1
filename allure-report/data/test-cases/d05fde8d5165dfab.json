{"uid":"d05fde8d5165dfab","name":"test_dashboard_elements","fullName":"tests.test_ui.test_login#test_dashboard_elements","historyId":"0eff5eaac8aae9dc0ad6e853a73e2b56","time":{"start":1742194091866,"stop":1742194093318,"duration":1452},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a title=\"My account\" href=\"javascript:;\" class=\"lgnprfrmlink active-tab-icon\">...</a> is not clickable at point (918, 164). Other element would receive the click: <div class=\"mslogin-wrapper login-popup-wrapper\">...</div>\n  (Session info: chrome=134.0.6998.89)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B176FE45+26629]\n\t(No symbol) [0x00007FF6B16D6010]\n\t(No symbol) [0x00007FF6B156931A]\n\t(No symbol) [0x00007FF6B15C77A9]\n\t(No symbol) [0x00007FF6B15C5162]\n\t(No symbol) [0x00007FF6B15C2201]\n\t(No symbol) [0x00007FF6B15C1108]\n\t(No symbol) [0x00007FF6B15B28A4]\n\t(No symbol) [0x00007FF6B15E7AAA]\n\t(No symbol) [0x00007FF6B15B2156]\n\t(No symbol) [0x00007FF6B15E7CC0]\n\t(No symbol) [0x00007FF6B1610169]\n\t(No symbol) [0x00007FF6B15E7883]\n\t(No symbol) [0x00007FF6B15B0550]\n\t(No symbol) [0x00007FF6B15B1803]\n\tGetHandleVerifier [0x00007FF6B1AC72BD+3529853]\n\tGetHandleVerifier [0x00007FF6B1ADDA22+3621858]\n\tGetHandleVerifier [0x00007FF6B1AD24D3+3575443]\n\tGetHandleVerifier [0x00007FF6B183B77A+860474]\n\t(No symbol) [0x00007FF6B16E088F]\n\t(No symbol) [0x00007FF6B16DCBC4]\n\t(No symbol) [0x00007FF6B16DCD66]\n\t(No symbol) [0x00007FF6B16CC2C9]\n\tBaseThreadInitThunk [0x00007FFC78CD259D+29]\n\tRtlUserThreadStart [0x00007FFC7A5AAF38+40]","statusTrace":"setup_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"76ac736990d599dc4ea18a05c754aaad\")>\n\n    @pytest.mark.ui\n    def test_dashboard_elements(setup_browser):\n        driver = setup_browser\n    \n    \n        with step(\"Click On My Account\"):\n>           driver.find_element(By.XPATH, \"/html/body/div[2]/div/header/div[3]/ul[1]/li[2]/a\").click()\n\ntests\\test_ui\\test_login.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000200B434A3C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6B16CC2C9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC78CD259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC7A5AAF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a title=\"My account\" href=\"javascript:;\" class=\"lgnprfrmlink active-tab-icon\">...</a> is not clickable at point (918, 164). Other element would receive the click: <div class=\"mslogin-wrapper login-popup-wrapper\">...</div>\nE         (Session info: chrome=134.0.6998.89)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B176FE45+26629]\nE       \t(No symbol) [0x00007FF6B16D6010]\nE       \t(No symbol) [0x00007FF6B156931A]\nE       \t(No symbol) [0x00007FF6B15C77A9]\nE       \t(No symbol) [0x00007FF6B15C5162]\nE       \t(No symbol) [0x00007FF6B15C2201]\nE       \t(No symbol) [0x00007FF6B15C1108]\nE       \t(No symbol) [0x00007FF6B15B28A4]\nE       \t(No symbol) [0x00007FF6B15E7AAA]\nE       \t(No symbol) [0x00007FF6B15B2156]\nE       \t(No symbol) [0x00007FF6B15E7CC0]\nE       \t(No symbol) [0x00007FF6B1610169]\nE       \t(No symbol) [0x00007FF6B15E7883]\nE       \t(No symbol) [0x00007FF6B15B0550]\nE       \t(No symbol) [0x00007FF6B15B1803]\nE       \tGetHandleVerifier [0x00007FF6B1AC72BD+3529853]\nE       \tGetHandleVerifier [0x00007FF6B1ADDA22+3621858]\nE       \tGetHandleVerifier [0x00007FF6B1AD24D3+3575443]\nE       \tGetHandleVerifier [0x00007FF6B183B77A+860474]\nE       \t(No symbol) [0x00007FF6B16E088F]\nE       \t(No symbol) [0x00007FF6B16DCBC4]\nE       \t(No symbol) [0x00007FF6B16DCD66]\nE       \t(No symbol) [0x00007FF6B16CC2C9]\nE       \tBaseThreadInitThunk [0x00007FFC78CD259D+29]\nE       \tRtlUserThreadStart [0x00007FFC7A5AAF38+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_browser","time":{"start":1742194081529,"stop":1742194084426,"duration":2897},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a title=\"My account\" href=\"javascript:;\" class=\"lgnprfrmlink active-tab-icon\">...</a> is not clickable at point (918, 164). Other element would receive the click: <div class=\"mslogin-wrapper login-popup-wrapper\">...</div>\n  (Session info: chrome=134.0.6998.89)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B176FE45+26629]\n\t(No symbol) [0x00007FF6B16D6010]\n\t(No symbol) [0x00007FF6B156931A]\n\t(No symbol) [0x00007FF6B15C77A9]\n\t(No symbol) [0x00007FF6B15C5162]\n\t(No symbol) [0x00007FF6B15C2201]\n\t(No symbol) [0x00007FF6B15C1108]\n\t(No symbol) [0x00007FF6B15B28A4]\n\t(No symbol) [0x00007FF6B15E7AAA]\n\t(No symbol) [0x00007FF6B15B2156]\n\t(No symbol) [0x00007FF6B15E7CC0]\n\t(No symbol) [0x00007FF6B1610169]\n\t(No symbol) [0x00007FF6B15E7883]\n\t(No symbol) [0x00007FF6B15B0550]\n\t(No symbol) [0x00007FF6B15B1803]\n\tGetHandleVerifier [0x00007FF6B1AC72BD+3529853]\n\tGetHandleVerifier [0x00007FF6B1ADDA22+3621858]\n\tGetHandleVerifier [0x00007FF6B1AD24D3+3575443]\n\tGetHandleVerifier [0x00007FF6B183B77A+860474]\n\t(No symbol) [0x00007FF6B16E088F]\n\t(No symbol) [0x00007FF6B16DCBC4]\n\t(No symbol) [0x00007FF6B16DCD66]\n\t(No symbol) [0x00007FF6B16CC2C9]\n\tBaseThreadInitThunk [0x00007FFC78CD259D+29]\n\tRtlUserThreadStart [0x00007FFC7A5AAF38+40]","statusTrace":"setup_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"76ac736990d599dc4ea18a05c754aaad\")>\n\n    @pytest.mark.ui\n    def test_dashboard_elements(setup_browser):\n        driver = setup_browser\n    \n    \n        with step(\"Click On My Account\"):\n>           driver.find_element(By.XPATH, \"/html/body/div[2]/div/header/div[3]/ul[1]/li[2]/a\").click()\n\ntests\\test_ui\\test_login.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000200B434A3C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6B16CC2C9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC78CD259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC7A5AAF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a title=\"My account\" href=\"javascript:;\" class=\"lgnprfrmlink active-tab-icon\">...</a> is not clickable at point (918, 164). Other element would receive the click: <div class=\"mslogin-wrapper login-popup-wrapper\">...</div>\nE         (Session info: chrome=134.0.6998.89)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B176FE45+26629]\nE       \t(No symbol) [0x00007FF6B16D6010]\nE       \t(No symbol) [0x00007FF6B156931A]\nE       \t(No symbol) [0x00007FF6B15C77A9]\nE       \t(No symbol) [0x00007FF6B15C5162]\nE       \t(No symbol) [0x00007FF6B15C2201]\nE       \t(No symbol) [0x00007FF6B15C1108]\nE       \t(No symbol) [0x00007FF6B15B28A4]\nE       \t(No symbol) [0x00007FF6B15E7AAA]\nE       \t(No symbol) [0x00007FF6B15B2156]\nE       \t(No symbol) [0x00007FF6B15E7CC0]\nE       \t(No symbol) [0x00007FF6B1610169]\nE       \t(No symbol) [0x00007FF6B15E7883]\nE       \t(No symbol) [0x00007FF6B15B0550]\nE       \t(No symbol) [0x00007FF6B15B1803]\nE       \tGetHandleVerifier [0x00007FF6B1AC72BD+3529853]\nE       \tGetHandleVerifier [0x00007FF6B1ADDA22+3621858]\nE       \tGetHandleVerifier [0x00007FF6B1AD24D3+3575443]\nE       \tGetHandleVerifier [0x00007FF6B183B77A+860474]\nE       \t(No symbol) [0x00007FF6B16E088F]\nE       \t(No symbol) [0x00007FF6B16DCBC4]\nE       \t(No symbol) [0x00007FF6B16DCD66]\nE       \t(No symbol) [0x00007FF6B16CC2C9]\nE       \tBaseThreadInitThunk [0x00007FFC78CD259D+29]\nE       \tRtlUserThreadStart [0x00007FFC7A5AAF38+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","steps":[{"name":"Click On My Account","time":{"start":1742194091866,"stop":1742194093318,"duration":1452},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a title=\"My account\" href=\"javascript:;\" class=\"lgnprfrmlink active-tab-icon\">...</a> is not clickable at point (918, 164). Other element would receive the click: <div class=\"mslogin-wrapper login-popup-wrapper\">...</div>\n  (Session info: chrome=134.0.6998.89)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B176FE45+26629]\n\t(No symbol) [0x00007FF6B16D6010]\n\t(No symbol) [0x00007FF6B156931A]\n\t(No symbol) [0x00007FF6B15C77A9]\n\t(No symbol) [0x00007FF6B15C5162]\n\t(No symbol) [0x00007FF6B15C2201]\n\t(No symbol) [0x00007FF6B15C1108]\n\t(No symbol) [0x00007FF6B15B28A4]\n\t(No symbol) [0x00007FF6B15E7AAA]\n\t(No symbol) [0x00007FF6B15B2156]\n\t(No symbol) [0x00007FF6B15E7CC0]\n\t(No symbol) [0x00007FF6B1610169]\n\t(No symbol) [0x00007FF6B15E7883]\n\t(No symbol) [0x00007FF6B15B0550]\n\t(No symbol) [0x00007FF6B15B1803]\n\tGetHandleVerifier [0x00007FF6B1AC72BD+3529853]\n\tGetHandleVerifier [0x00007FF6B1ADDA22+3621858]\n\tGetHandleVerifier [0x00007FF6B1AD24D3+3575443]\n\tGetHandleVerifier [0x00007FF6B183B77A+860474]\n\t(No symbol) [0x00007FF6B16E088F]\n\t(No symbol) [0x00007FF6B16DCBC4]\n\t(No symbol) [0x00007FF6B16DCD66]\n\t(No symbol) [0x00007FF6B16CC2C9]\n\tBaseThreadInitThunk [0x00007FFC78CD259D+29]\n\tRtlUserThreadStart [0x00007FFC7A5AAF38+40]\n\n","statusTrace":"  File \"C:\\Users\\dell\\PycharmProjects\\Framework_Setup_1\\tests\\test_ui\\test_login.py\", line 27, in test_dashboard_elements\n    driver.find_element(By.XPATH, \"/html/body/div[2]/div/header/div[3]/ul[1]/li[2]/a\").click()\n  File \"C:\\Users\\dell\\PycharmProjects\\Framework_Setup_1\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 119, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\dell\\PycharmProjects\\Framework_Setup_1\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 572, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\dell\\PycharmProjects\\Framework_Setup_1\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\dell\\PycharmProjects\\Framework_Setup_1\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":1,"attachmentStep":false},"afterStages":[{"name":"setup_browser::0","time":{"start":1742194093570,"stop":1742194096130,"duration":2560},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"tag","value":"ui"},{"name":"parentSuite","value":"tests.test_ui"},{"name":"suite","value":"test_login"},{"name":"host","value":"Ankit"},{"name":"thread","value":"9548-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_ui.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ui"]},"source":"d05fde8d5165dfab.json","parameterValues":[]}